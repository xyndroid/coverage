#!/usr/bin/ruby
# This program parses code coverage test result
# that is generated by Atlassian Clover. At the time
# of this parser was written, Clover 4.0.6 was used
# and this parser was designed to parse coverage results
# generated by this version. For other versions, please 
# take a look at the generated HTML files by Clover. 


# Make sure to change the $project_name variable according to the project
# name. It would generate wrong results or report error if it doesn't
# changed to the project name.
# Parser looks for test results in target/clover/org/apache/name_of_the_project

require 'find'
require 'readline'

class TestParser
    attr_reader :path
    # change this variable according to the project name
    $project_name = 'mahout'
    def initialize(path_to_target)
        @path = path_to_target + "org/apache/" + $project_name
        puts @path
    end

    def list
        auiTableIsFound = false
        auiTableSortableIsFound = false
        currentLine = nil
        index = 1
        startScanning = false

        Find.find(@path) do |file|
            if file =~ /.*Test.*\.html/
                puts file.sub(".html", "")
                File.open(file, "r").each_line do |line|
                    if line.include? "<tbody>"
                        startScanning = true
                    elsif line.include? "</tbody>"
                        startScanning = false
                    elsif line.include? "<table class=\"aui\">"
                        auiTableIsFound = true
                    elsif line.include? "<table class=\"aui aui-table-sortable\">"
                        auiTableSortableIsFound = true
                    elsif line.include? "</table>"
                        auiTableIsFound = false
                        auiTableSortableIsFound = false
                    end

                    # grabbing of test name works
                    if line.include? "<a  href=\"../../../../../../org/apache/" + $project_name and auiTableIsFound == true and startScanning == true 
                        # print test name
                        #puts line.match(/(\>.*\<)/)
                        puts line[/>(.*)</,1]
                        startScanning = false
                    elsif line.include? "<tr> <td id=" and auiTableSortableIsFound == true and startScanning == true
                        currentLine = line.scan(/\"(.*)\"/)[0][0].to_s
                        print currentLine
                    elsif line.include? "<div class=\"barGraphValue\"><span class=\"sortValue\">" and auiTableSortableIsFound == true and startScanning == true
                        #currentLine = line.match(/(\d+\.\d+)/).to_s
                        currentLine = line[/(\d+\.\d+)/, 1]
                        puts "\t\t" + currentLine
                    elsif line.include? "<span class=\"sortValue\">" and auiTableSortableIsFound == true and startScanning == true
                        # print test class information
                        currentLine = line.scan(/>(.*)</)[0][0].to_s
                        if index % 2 == 0
                            if currentLine.include? "<" or currentLine.include? ">"
                                currentLine = line.scan(/>(\d+\.\d+)</)[0].to_s
                            end
                            puts "\t\t" + currentLine
                        else
                            print currentLine
                        end
                        index += 1
                    end
                end
                index = 1
                puts "-- -- -- -- -- -- -- -- -- -- -- -- --"
                startScanning = false
                auiTableIsFound = false
                auiTableSortableIsFound = false
            end
        end
    end
end

if ARGV.length == 0
    puts "Path to /target/clover is needed as an argument"
    puts "Usage:"
    puts "./testParser /path/to/target/clover"
    exit
else
    parser = TestParser.new(ARGV[0]);
    parser.list
end
